class Event(object):
    """
    Base class for Market, Signal, Order and Fill
    """
    pass


class MarketEvent(Event):
    """
    Handles the event of receiving new data
    """

    def __init__(self):

        self.type = 'MARKET'


class SignalEvent(Event):
    """
    Handles the event of a Signal being generated by a Strategy and being received by the Portfolio
    """

    def __init__(self, strategy_id, symbol, datetime, signal_type, strength, pl_ratio = None, spread = None):
        """
        Parameters:
        strategy_id - The unique identifier for the strategy that
        generated the signal.
        symbol -  e.g. 'EUR/USD'.
        datetime - The timestamp at which the signal was generated.
        signal_type - 'LONG' or 'SHORT'.
        strength - An adjustment factor "suggestion" used to scale
        quantity at the portfolio level. Useful for pairs strategies.
        """
        self.type = 'SIGNAL'

        self.strategy_id = strategy_id
        self.symbol = symbol
        self.datetime = datetime
        self.signal_type = signal_type
        self.strength = strength
        self.pl_ratio = pl_ratio
        self.spread = spread

    def __str__(self):
        return 'Signal {} for symbol {}'.format(self.signal_type, self.symbol)


class GroupSignalEvent(Event):

    def __init__(self, strategy_id, signals, datetime, strength, pl_ratio=None):
        self.type = 'GROUP_SIGNAL'

        self.strategy_id = strategy_id
        self.signals = signals
        self.datetime = datetime
        self.strength = strength
        self.pl_ratio = pl_ratio

class OrderEvent(Event):
    """
    Handles the event of sending an Order to be executed
    """

    def __init__(self, symbol, order_type, quantity, direction, timestamp=None):
        """
        Initialises the order type, setting whether it is
        a Market order ('MKT') or Limit order ('LMT'), has
        a quantity (integral) and its direction ('BUY' or
        'SELL').
        Parameters:
        symbol - The instrument to trade.
        order_type - 'MKT' or 'LMT' for Market or Limit.
        quantity - Non-negative integer for quantity.
        direction - 'BUY' or 'SELL' for long or short.
        """
        self.timestamp = timestamp
        self.type = 'ORDER'
        self.symbol = symbol
        self.order_type = order_type
        self.quantity = quantity
        self.direction = direction

    def print_order(self):
        """
        Outputs the values within the Order.
        """

        print(
            "Order: Symbol=%s, Type=%s, Quantity=%s, Direction=%s" %
            (self.symbol, self.order_type, self.quantity, self.direction)
        )


class FillEvent(Event):
    """
    Creates a Filled Order, as returned from a brokerage.
    Stores the quantity of an instrument
    actually filled and at what price. In addition, stores
    the commission of the trade from the brokerage.
    """

    def __init__(self, timeindex, symbol, exchange, quantity, direction, fill_cost, commission=None, broker=None, position=None):
        """
        Initialises the FillEvent object. Sets the symbol, exchange,
        quantity, direction, cost of fill and an optional
        commission.
        If commission is not provided, the Fill object will
        calculate it based on the trade size and Brokerfees.
        Parameters:
        timeindex - The bar-resolution when the order was filled.
        symbol - The instrument which was filled.
        exchange - The exchange where the order was filled.
        quantity - The filled quantity.
        direction - The direction of fill ('BUY' or 'SELL')
        fill_cost - The holdings value.
        commission - An optional commission
        broker - brokerage company executing the trades
        """
        ##todo remove broker and position
        self.type = 'FILL'
        self.timeindex = timeindex
        self.symbol = symbol
        self.exchange = exchange
        self.quantity = quantity
        self.direction = direction
        self.position = position
        self.fill_cost = fill_cost
        self.broker = broker
        # Calculate commission
        if commission is None:
            self.commission = -1
        else:
            self.commission = commission
